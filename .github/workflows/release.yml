---
    name: Release
    on:
      push:
        branches:
          - dev-v1*
    env:
      CARGO_INCREMENTAL: 0
      CARGO_NET_RETRY: 10
      RUST_BACKTRACE: short
      RUSTUP_MAX_RETRIES: 10
      MACOSX_DEPLOYMENT_TARGET: 10.7
    jobs:
      release_please:
        name: Release Please
        runs-on: ubuntu-latest
        if: github.repository == 'dhruveshb-mecha/mechanix-gui'
        outputs:
          release_created: ${{ steps.release.outputs.release_created }}
          tag_name: ${{ steps.release.outputs.tag_name }}
        steps:
          - uses: google-github-actions/release-please-action@v4
            id: release
            with:
              token: ${{ secrets.MY_RELEASE_PLEASE_TOKEN }}
              release-type: rust
      github_build:
        name: Build release binaries
        needs: release_please
        if: ${{ needs.release_please.outputs.release_created == 'true' }}
        strategy:
          fail-fast: false
          matrix:
            include:
              - target: x86_64-unknown-linux-gnu
                os: ubuntu-latest
                name: starship-x86_64-unknown-linux-gnu.tar.gz
              - target: x86_64-unknown-linux-musl
                os: ubuntu-latest
                name: starship-x86_64-unknown-linux-musl.tar.gz
              - target: i686-unknown-linux-musl
                os: ubuntu-latest
                name: starship-i686-unknown-linux-musl.tar.gz
              - target: aarch64-unknown-linux-musl
                os: ubuntu-latest
                name: starship-aarch64-unknown-linux-musl.tar.gz
              - target: arm-unknown-linux-musleabihf
                os: ubuntu-latest
                name: starship-arm-unknown-linux-musleabihf.tar.gz
        runs-on: ${{ matrix.os }}
        continue-on-error: true
        env:
          RUSTFLAGS: ${{ matrix.rustflags || '' }}
        steps:
          - name: Setup | Checkout
            uses: actions/checkout@v4
          - name: Setup | Rust
            uses: dtolnay/rust-toolchain@master
            with:
              toolchain: stable
              target: ${{ matrix.target }}
          - name: Setup | Install cross [Linux]
            if: matrix.os == 'ubuntu-latest'
            uses: taiki-e/install-action@cross
          - name: Build | Build [Cross]
            if: matrix.os == 'ubuntu-latest'
            run: |
              cd services/server  
              cross build --release --locked --target ${{ matrix.target }}
          - name: Post Build | Prepare artifacts [-nix]
            if: matrix.os != 'windows-latest'
            run: |
              cd services/server 
              cd target/${{ matrix.target }}/release
              tar czvf ../../../${{ matrix.name }} starship
              cd -
          - name: Release | Upload artifacts
            uses: actions/upload-artifact@v4
            with:
              name: ${{ matrix.name }}
              path: ${{ matrix.name }}
    