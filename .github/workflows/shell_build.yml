name: Build and Release Shell Binaries
on:
  push:
    branches:
      - main
      - dev-v1
      - build-workflow
  release:
    types: [created, edited]
env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10
  MACOSX_DEPLOYMENT_TARGET: 10.7
  CARGO_NET_GIT_FETCH_WITH_CLI: true

jobs:
  github_build:
    name: Build release binaries
    strategy:
      fail-fast: false
      matrix:
        include:
          # - target: x86_64-unknown-linux-gnu
          #   os: ubuntu-latest
          #   name: mechanix-greeter-x86_64-unknown-linux-gnu.tar.gz
          #   package: mechanix-greeter
          #   path: shell/greeter

          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: mechanix-greeter-aarch64-unknown-linux-gnu.tar.gz
            package: mechanix-greeter
            path: shell/greeter

          # - target: x86_64-unknown-linux-gnu
          #   os: ubuntu-latest
          #   name: mechanix-app-drawer-x86_64-unknown-linux-gnu.tar.gz
          #   package: mechanix-app-drawer
          #   path: shell/app-drawer

    runs-on: ${{ matrix.os }}
    continue-on-error: true
    env:
      RUSTFLAGS: ${{ matrix.rustflags || '' }}
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4

      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Setup | Install cross [Linux]
        if: matrix.os == 'ubuntu-latest'
        uses: taiki-e/install-action@cross

      - name: Install dependencies
        continue-on-error: true
        run: |
          sudo apt update
          sudo apt install -y libdbus-1-dev libdbus-1-3 pkg-config

      - name: Setup Cargo Deb
        run: cargo install cargo-deb

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_GIT }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      # mechanix-greeter
      - name: Build | Build [${{ matrix.package }}]
        if: matrix.os == 'ubuntu-latest'
        continue-on-error: true
        run: |
          cd ${{ matrix.path }}
          cargo --config net.git-fetch-with-cli=true fetch
          cross build --release --target ${{ matrix.target }}

      - name: Build | Deb [${{ matrix.package }}]
        if: matrix.os == 'ubuntu-latest'
        continue-on-error: true
        run: |
          cd ${{ matrix.path }}
          cargo deb -p ${{ matrix.package }} --target=${{ matrix.target }}

      - name: Post Build | Prepare artifacts [${{ matrix.package }}]
        if: matrix.os == 'ubuntu-latest'
        continue-on-error: true
        run: |
          cd shell/target/${{ matrix.target }}/release/
          tar czvf ../../../../${{matrix.name}} ${{ matrix.package }}
          cd -

          cd shell/target/debian/
          mv *.deb ../../../
          cd -

      - name: Release | Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ./mechanix*

  github_release:
    name: Release binaries
    runs-on: ubuntu-latest
    needs: github_build
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.MY_RELEASE_PLEASE_TOKEN }}
        with:
          files: mechanix-*/mechanix-*
          tag_name: v.1.0.${{ github.run_number }}
